from Crypto.Cipher import AES
from hashlib import sha256
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad


G = 5
p = 37
ALICE_SECRET_KEY = 8
BOB_SECRET_KEY = 15
IV = get_random_bytes(32) # 256 bytes

#def compute_shared_key(secret_key, common_key, generator): # returns the final shared key
    # secret_key | X: the key generated by each and not shared ALICE_SECRET_NUMBER | BOB_SECRET_NUMBER 
    # common_key | (q): the key both Alice and Bob agreed on
    # generator | (alpha): the generator of choice
    
    # RETURN shared_key: the key calculated by both parties
    
    # A = (alpha ^ X) % q
    
    
def main():  
    #GET A & B
    A = (G ^ ALICE_SECRET_KEY) % p #A = (g^a) mod p   ALICE'S PUBLIC KEY (pt.1)
    B = (G ^ BOB_SECRET_KEY) % p #B = (g^b) mod p     BOB'S PUBLIC KEY (pt.1)

    # BOB takes Alices Public Key and calculates common_key
    bobs_shared_secret = (A ^ BOB_SECRET_KEY) % p # (A^b) mod p 
    alices_shared_secret = (B ^ ALICE_SECRET_KEY) % p #(B^a) mod p
    
    print("Alice private key: ", ALICE_SECRET_KEY)
    print("Bob private key: " , BOB_SECRET_KEY)
    print("Alice public key" , A)
    print("Bob public key" , B)
    print("Alice's computed shared secret:", alices_shared_secret)
    print("Bob's computed shared secret:", bobs_shared_secret)

    print(f"Alice and Bob have the same key {alices_shared_secret == bobs_shared_secret}")

    symmetric_key = bobs_shared_secret
    key = sha256(symmetric_key) #create a hash of the secret 
    key = # get the 1st 16 bytes for AES CBC key generation
    cipher = AES.new(key)
    

if __name__ == "__main__": 
    main()